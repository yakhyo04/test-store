Index: src/sections/collection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"./styles/collection.scss\";\nimport { onDocumentReady } from \"../utils/dom\";\nimport { addToCart } from \"../utils/addToCart\";\n\nconst state = {\n  elements: {},\n};\n\nconst cacheState = () => {\n  state.elements = {\n    sortBy: document.getElementById(\"SortBy\"),\n    collectionFilterCheckbox: document.querySelectorAll(\n      \".collectionFilter input[type='checkbox']\",\n    ),\n    collectionFilterPrice: document.querySelectorAll(\n      \".filter-group-display__price-range input[type='number']\",\n    ),\n    paginationItems: document.querySelectorAll(\"[data-pagination-item]\"),\n    paginationLinks: document.querySelectorAll(\"[data-pagination-link]\"),\n    paginateNext: document.querySelector(\"[data-next]\"),\n    collectionGrid: document.getElementById(\"CollectionGrid\"),\n    collectionButton: document.querySelector(\".collection__load--button\"),\n    filterButton: document.querySelector(\".collection__filter--button\"),\n    filterWrapper: document.querySelector(\".collection__filters\"),\n    collectionOverlay: document.querySelector(\".collection__overlay\"),\n    body: document.querySelector(\"body\"),\n    filterCloseButton: document.querySelector(\n      \".collection__filters .icons__wrapper--span\",\n    ),\n    paginateBtn: document.querySelectorAll(\".collection__paginate--btn\"),\n    iconGrid: document.querySelector(\".icon__grid\"),\n    iconList: document.querySelector(\".icon__list\"),\n    collectionProduct: document.querySelectorAll(\".collection__product\"),\n    url: new URL(window.location.href),\n    sortResult: \"created-ascending\",\n    defaultPage: 2,\n    filterResult: \"\",\n    filterPriceResult: \"\",\n  };\n};\n\nconst hidingPaginateBtn = () => {\n  state.elements.paginateBtn.forEach((a) => {\n    a.classList.add(\"active\");\n  });\n};\n\nconst showingPaginateBtn = () => {\n  state.elements.paginateBtn.forEach((a) => {\n    a.classList.remove(\"active\");\n  });\n};\n\nconst collectionLoadMore = async () => {\n  try {\n    const response = await fetch(\n      `${window.location.pathname}?section=${window.sectionId}&sort_by=${state.elements.sortResult}&page=${state.elements.defaultPage}&${state.elements.filterResult}&${state.elements.filterPriceResult}`,\n    );\n    const data = await response.text();\n    const collectionsWrapper = new DOMParser().parseFromString(\n      data,\n      \"text/html\",\n    );\n    const items = collectionsWrapper.querySelectorAll(\".collection__product\");\n    state.elements.defaultPage += 1;\n\n    const value = collectionsWrapper.querySelector(\n      \".collection__grid--wrapper\",\n    );\n\n    if (!value.dataset.next) {\n      hidingPaginateBtn();\n    } else {\n      state.elements.paginateNext = value.dataset.next;\n    }\n\n    return items;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst renderCollections = (items) => {\n  items.forEach((item) => {\n    state.elements.collectionGrid.insertAdjacentElement(\"beforeend\", item);\n  });\n};\n\nconst resultData = (data) => {\n  const newInnerHtml = new DOMParser()\n    .parseFromString(data, \"text/html\")\n    .getElementById(\"CollectionGrid\").innerHTML;\n\n  state.elements.collectionGrid.innerHTML = newInnerHtml;\n};\n\nconst setActivePagination = (itemIndex) => {\n  state.elements.paginationItems.forEach((paginationItem, index) => {\n    paginationItem.className = \"\";\n    if (index !== itemIndex) {\n      paginationItem.classList.add(\"pagination__content--number\");\n      return;\n    }\n    paginationItem.classList.add(\"pagination__content--link\");\n  });\n};\n\nconst filterDrawerOpen = () => {\n  state.elements.filterWrapper.classList.add(\"active\");\n  state.elements.collectionOverlay.classList.add(\"active\");\n  state.elements.body.overflow = \"hidden\";\n};\n\nconst filterDrawerClose = () => {\n  state.elements.filterWrapper.classList.remove(\"active\");\n  state.elements.collectionOverlay.classList.remove(\"active\");\n  state.elements.body.overflow = \"visible\";\n};\n\nconst gridFunction = () => {\n  state.elements.collectionGrid.classList.remove(\"collection__list--section\");\n  state.elements.collectionGrid.classList.add(\"collection__grid--section\");\n};\n\nconst listFunction = () => {\n  state.elements.collectionGrid.classList.remove(\"collection__grid--section\");\n  state.elements.collectionGrid.classList.add(\"collection__list--section\");\n};\n\nfunction updateUrlParams() {\n  const { sortBy } = state.elements;\n  const params = new URLSearchParams();\n\n  if (sortBy.value) {\n    state.elements.defaultPage = 2;\n    showingPaginateBtn();\n    state.elements.sortResult = sortBy.value;\n    params.set(sortBy.name, sortBy.value);\n  }\n\n  state.elements.collectionFilterCheckbox.forEach((checkbox) => {\n    if (checkbox.checked) {\n      const name = checkbox.getAttribute(\"name\");\n      const value = checkbox.getAttribute(\"value\");\n      state.elements.defaultPage = 2;\n      showingPaginateBtn();\n      state.elements.filterResult = `${`${name}=${value}`}`;\n      params.append(name, value);\n    }\n  });\n\n  state.elements.collectionFilterPrice.forEach((price) => {\n    state.elements.defaultPage = 2;\n    showingPaginateBtn();\n    const name = price.getAttribute(\"name\");\n    state.elements.filterPriceResult = `${`${name}=${price.value}`}`;\n    params.set(name, price.value);\n  });\n\n  const { paginationItems } = state.elements;\n  for (let i = 0; i < paginationItems.length; i++) {\n    const item = paginationItems[i];\n    if (item.classList.contains(\"pagination__content--link\")) {\n      const value = item.getAttribute(\"data-value\");\n      // state.elements.defaultPage = value + 1;\n      const name = item.getAttribute(\"name\");\n      params.set(name, value);\n      break;\n    }\n  }\n\n  state.elements.url.search = params.toString();\n  window.history.pushState({}, \"\", state.elements.url);\n}\n\nconst fetchData = async () => {\n  state.elements.collectionGrid.classList.add(\"active\");\n  const res = await fetch(state.elements.url);\n  const data = await res.text();\n\n  if (data) {\n    state.elements.collectionGrid.classList.remove(\"active\");\n    resultData(data);\n  }\n};\n\nconst sortFunction = async () => {\n  updateUrlParams();\n  fetchData();\n};\n\nconst attachEventListeners = () => {\n  state.elements.sortBy.addEventListener(\"change\", sortFunction);\n  state.elements.filterButton.addEventListener(\"click\", filterDrawerOpen);\n  state.elements.collectionOverlay.addEventListener(\"click\", filterDrawerClose);\n  state.elements.filterCloseButton.addEventListener(\"click\", filterDrawerClose);\n  state.elements.iconGrid.addEventListener(\"click\", gridFunction);\n  state.elements.iconList.addEventListener(\"click\", listFunction);\n  state.elements.collectionFilterPrice.forEach((price) => {\n    price.addEventListener(\"change\", async () => {\n      updateUrlParams();\n      fetchData();\n    });\n  });\n  state.elements.paginationItems.forEach((item, index) => {\n    item.addEventListener(\"click\", async (e) => {\n      e.preventDefault();\n      setActivePagination(index);\n      updateUrlParams();\n      fetchData();\n    });\n  });\n  state.elements.collectionFilterCheckbox.forEach((checkbox) => {\n    checkbox.addEventListener(\"change\", async () => {\n      updateUrlParams();\n      fetchData();\n    });\n  });\n  state.elements.collectionButton.addEventListener(\"click\", async () => {\n    const productItem = await collectionLoadMore();\n    renderCollections(productItem);\n  });\n};\n\nconst init = () => {\n  cacheState();\n  attachEventListeners();\n};\n\nonDocumentReady(init);\n\nclass AddToCart extends HTMLElement {\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    onDocumentReady(() => {\n      this.addToCart = this.querySelector(\"[data-component='add-to-cart']\");\n      this.init();\n    });\n  }\n\n  init() {\n    document.addEventListener(\"click\", (e) => {\n      addToCart(e);\n    });\n  }\n\n  disconnectedCallback() {\n    console.log(\"Disconnected Callback\");\n  }\n\n  adoptedCallback() {\n    console.log(\"Adopted Callback\");\n  }\n}\n\ncustomElements.define(\"add-to-cart\", AddToCart);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/sections/collection.js b/src/sections/collection.js
--- a/src/sections/collection.js	(revision 9f24eb98a6209a8810280a6edbe3eb4423b3bcb9)
+++ b/src/sections/collection.js	(date 1713353196138)
@@ -133,7 +133,7 @@
 
   if (sortBy.value) {
     state.elements.defaultPage = 2;
-    showingPaginateBtn();
+    // showingPaginateBtn();
     state.elements.sortResult = sortBy.value;
     params.set(sortBy.name, sortBy.value);
   }
